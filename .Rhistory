selected_drivers <- reactive(input$driverSelect)
selected_gp <- reactive(input$GPSelect)
selected_data <- reactive(subset(laps.nonpit.greenflag, Driver %in% selected_drivers()))
selected_laps_pit <- reactive(subset(laps, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., Driver %in% selected_drivers()))
selected_pit_data <- reactive(subset(pit_data, Driver %in% selected_drivers()))
# Create interactive plots
# Laptime vs lapnumber
pt1 <- reactive({
p1 <- ggplot(selected_data(), aes(LapNumber, LapTime, col = Driver)) +
geom_line() + xlab("Lap Number") + ylab("Lap time [s]") +
ggtitle("Lap time throughout the race for selected drivers")
ggplotly(p1) %>% layout(showlegend = F)
})
# Boxplot of laptimes
pt2 <- reactive({
p2 <- ggplot(selected_data(),mapping = aes(x = reorder(Driver, LapTime, FUN = median), y = LapTime, col = Driver)) + geom_boxplot() + xlab("Driver") + ylab("Lap time [s]") +
ggtitle("Lap time distributions for selected drivers")
ggplotly(p2) %>% layout(showlegend = F)
})
# Scatterplot of drivers vs pit times
pt3 <- reactive({
p3 <- ggplot(data = selected_pit_data()) +
geom_point(mapping = aes(PitTime, Driver, col = Driver), size = 3) +
xlab("Pit Time [s]") + ylab("Driver") + ggtitle("Pit times for selected drivers")
ggplotly(p3) %>% layout(showlegend = F)
})
# Render plots
output$lineplot <- renderPlotly({pt1()})
output$boxplot <- renderPlotly({pt2()})
output$scatter <- renderPlotly({pt3()})
}
shinyApp(ui, server)
# Get pit time data
status <- c(1,2,3,4,6,7)
selected_laps_pit1 <-
subset(df, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., (LapNumber == 1 & !is.na(PitInTime) | LapNumber != 1)) %>%
subset(., TrackStatus %in% status)
selected_laps_pit1
pit_drivers <- c()
pit_times <- c()
for (i in seq(1,length(selected_laps_pit1$PitInTime)-1,by = 2)) {
time_diff <- as.numeric(
as.duration(
hms(gsub("0 days ", "", selected_laps_pit1$PitOutTime[i+1])) -
hms(gsub("0 days ", "", selected_laps_pit1$PitInTime[i]))
)
)
pit_times <- c(pit_times, time_diff)
pit_drivers <- c(pit_drivers, selected_laps_pit1$Driver[i])
}
pit_data <- data.frame(Driver = pit_drivers, PitTime = pit_times )
pit_data
selected_laps_pit1 <-
subset(df, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., (LapNumber == 1 & !is.na(PitInTime) | LapNumber != 1)) %>%
subset(., TrackStatus !%in% status)
selected_laps_pit1 <-
subset(df, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., (LapNumber == 1 & !is.na(PitInTime) | LapNumber != 1))
selected_laps_pit1
# Get pit time data
status <- c(1,2,3,4,6,7, 25)
# Get pit time data
status <- c(1,2,3,4,6,7, 25)
selected_laps_pit1 <-
subset(df, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., (LapNumber == 1 & !is.na(PitInTime) | LapNumber != 1)) %>%
subset(., TrackStatus %in% status)
selected_laps_pit1
pit_drivers <- c()
pit_times <- c()
for (i in seq(1,length(selected_laps_pit1$PitInTime)-1,by = 2)) {
time_diff <- as.numeric(
as.duration(
hms(gsub("0 days ", "", selected_laps_pit1$PitOutTime[i+1])) -
hms(gsub("0 days ", "", selected_laps_pit1$PitInTime[i]))
)
)
pit_times <- c(pit_times, time_diff)
pit_drivers <- c(pit_drivers, selected_laps_pit1$Driver[i])
}
pit_data <- data.frame(Driver = pit_drivers, PitTime = pit_times )
pit_data
selected_laps_pit1 <-
subset(df, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., (LapNumber == 1 & !is.na(PitInTime) | LapNumber != 1))
selected_laps_pit1
# Get pit time data
status <- c(1,2,3,4,6,7)
selected_laps_pit1 <-
subset(df, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., (LapNumber == 1 & !is.na(PitInTime) | LapNumber != 1))
subset(., TrackStatus %in% status)
selected_laps_pit1 <-
subset(df, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., (LapNumber == 1 & !is.na(PitInTime) | LapNumber != 1)) %>%
subset(., TrackStatus %in% status)
selected_laps_pit1
selected_laps_pit1
# Get pit time data
status <- c(1,2,3,4,6,7)
selected_laps_pit1 <-
subset(df, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., (LapNumber == 1 & !is.na(PitInTime) | LapNumber != 1)) %>%
subset(., TrackStatus %in% status)
selected_laps_pit1
pit_drivers <- c()
pit_times <- c()
for (i in seq(1,length(selected_laps_pit1$PitInTime)-1,by = 2)) {
time_diff <- as.numeric(
as.duration(
hms(gsub("0 days ", "", selected_laps_pit1$PitOutTime[i+1])) -
hms(gsub("0 days ", "", selected_laps_pit1$PitInTime[i]))
)
)
pit_times <- c(pit_times, time_diff)
pit_drivers <- c(pit_drivers, selected_laps_pit1$Driver[i])
}
pit_data <- data.frame(Driver = pit_drivers, PitTime = pit_times )
pit_data
selected_laps_pit1
# Get pit time data
status <- c(1,2,3,4,6,7, 25)
selected_laps_pit1 <-
subset(df, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., (LapNumber == 1 & !is.na(PitInTime) | LapNumber != 1)) %>%
subset(., TrackStatus %in% status)
selected_laps_pit1
# Get pit time data
status <- c(1,2,3,4,6,7, 25, 45)
selected_laps_pit1 <-
subset(df, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., (LapNumber == 1 & !is.na(PitInTime) | LapNumber != 1)) %>%
subset(., TrackStatus %in% status)
selected_laps_pit1
pit_data
# Get pit time data
status <- c(1,2,3,4,6,7, 25, 45)
selected_laps_pit1 <-
subset(df, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., (LapNumber == 1 & !is.na(PitInTime) | LapNumber != 1)) %>%
subset(., TrackStatus %in% status)
selected_laps_pit1
pit_drivers <- c()
pit_times <- c()
for (i in seq(1,length(selected_laps_pit1$PitInTime)-1,by = 2)) {
time_diff <- as.numeric(
as.duration(
hms(gsub("0 days ", "", selected_laps_pit1$PitOutTime[i+1])) -
hms(gsub("0 days ", "", selected_laps_pit1$PitInTime[i]))
)
)
pit_times <- c(pit_times, time_diff)
pit_drivers <- c(pit_drivers, selected_laps_pit1$Driver[i])
}
pit_data <- data.frame(Driver = pit_drivers, PitTime = pit_times )
pit_data
pit_data
subset(selected_laps_pit1, Driver == "RUS")
subset(laps, Driver == "RUS")
# Get pit time data
status <- c(1,2,3,4,6,7, 25, 45)
selected_laps_pit1 <-
subset(df, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., (LapNumber == 1 & !is.na(PitInTime) | LapNumber != 1)) %>%
subset(., TrackStatus %in% status)
subset(laps, Driver == "RUS")
pit_drivers <- c()
pit_times <- c()
for (i in seq(1,length(selected_laps_pit1$PitInTime)-1,by = 2)) {
time_diff <- as.numeric(
as.duration(
hms(gsub("0 days ", "", selected_laps_pit1$PitOutTime[i+1])) -
hms(gsub("0 days ", "", selected_laps_pit1$PitInTime[i]))
)
)
pit_times <- c(pit_times, time_diff)
pit_drivers <- c(pit_drivers, selected_laps_pit1$Driver[i])
}
pit_data <- data.frame(Driver = pit_drivers, PitTime = pit_times )
pit_data
# Get pit time data
status <- c(1,2,3,4,6,7, 25, 45)
selected_laps_pit1 <-
subset(df, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., (LapNumber == 1 & !is.na(PitInTime) | LapNumber != 1)) %>%
subset(., TrackStatus %in% status)
subset(laps, Driver == "RUS")
pit_drivers <- c()
pit_times <- c()
for (i in seq(1,length(selected_laps_pit1$PitInTime)-1,by = 2)) {
time_diff <- as.numeric(
as.duration(
hms(gsub("0 days ", "", selected_laps_pit1$PitOutTime[i+1])) -
hms(gsub("0 days ", "", selected_laps_pit1$PitInTime[i]))
)
)
if (time_diff > 80) {next}
else {
pit_times <- c(pit_times, time_diff)
pit_drivers <- c(pit_drivers, selected_laps_pit1$Driver[i])
}
}
# Get pit time data
status <- c(1,2,3,4,6,7, 25, 45)
selected_laps_pit1 <-
subset(df, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., (LapNumber == 1 & !is.na(PitInTime) | LapNumber != 1)) %>%
subset(., TrackStatus %in% status)
subset(laps, Driver == "RUS")
pit_drivers <- c()
pit_times <- c()
for (i in seq(1,length(selected_laps_pit1$PitInTime)-1,by = 2)) {
time_diff <- as.numeric(
as.duration(
hms(gsub("0 days ", "", selected_laps_pit1$PitOutTime[i+1])) -
hms(gsub("0 days ", "", selected_laps_pit1$PitInTime[i]))
)
)
print(time_diff)
if (time_diff > 80) {next}
else {
pit_times <- c(pit_times, time_diff)
pit_drivers <- c(pit_drivers, selected_laps_pit1$Driver[i])
}
}
# Get pit time data
status <- c(1,2,3,4,6,7, 25, 45)
selected_laps_pit1 <-
subset(df, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., (LapNumber == 1 & !is.na(PitInTime) | LapNumber != 1)) %>%
subset(., TrackStatus %in% status)
subset(laps, Driver == "RUS")
pit_drivers <- c()
pit_times <- c()
for (i in seq(1,length(selected_laps_pit1$PitInTime)-1,by = 2)) {
time_diff <- as.numeric(
as.duration(
hms(gsub("0 days ", "", selected_laps_pit1$PitOutTime[i+1])) -
hms(gsub("0 days ", "", selected_laps_pit1$PitInTime[i]))
)
)
print(time_diff)
if (is.na(time_diff)) {next}
if (time_diff > 80) {next}
else {
pit_times <- c(pit_times, time_diff)
pit_drivers <- c(pit_drivers, selected_laps_pit1$Driver[i])
}
}
pit_data <- data.frame(Driver = pit_drivers, PitTime = pit_times )
pit_data
# Total width of window is 12 units
ui <- fluidPage(
titlePanel(h1("F1 data visualisation for selected 2023 grand prix's!", align = "center")),
sidebarLayout(position = "left",
sidebarPanel("Choose driver", width = 2,
selectInput(inputId = "driverSelect",
label = "Selected drivers:",
choices = driver.names,
selected = c("VER", "HAM"),
multiple = T),
selectInput(inputId = "GPSelect",
label = "Selected grand prix",
choices = races,
selected = "SPAIN",
multiple = F)
),
mainPanel(width = 9,
fluidRow(
splitLayout(cellWidths = c("50%","50%"),
plotlyOutput(outputId = "scatter"),
plotlyOutput(outputId = "boxplot")
)
),
fluidRow(
plotlyOutput(outputId = "lineplot")
)
)
))
server <- function(input, output) {
# Manage data
selected_drivers <- reactive(input$driverSelect)
selected_gp <- reactive(input$GPSelect)
selected_data <- reactive(subset(laps.nonpit.greenflag, Driver %in% selected_drivers()))
selected_laps_pit <- reactive(subset(laps, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., Driver %in% selected_drivers()))
selected_pit_data <- reactive(subset(pit_data, Driver %in% selected_drivers()))
# Create interactive plots
# Laptime vs lapnumber
pt1 <- reactive({
p1 <- ggplot(selected_data(), aes(LapNumber, LapTime, col = Driver)) +
geom_line() + xlab("Lap Number") + ylab("Lap time [s]") +
ggtitle("Lap time throughout the race for selected drivers")
ggplotly(p1) %>% layout(showlegend = F)
})
# Boxplot of laptimes
pt2 <- reactive({
p2 <- ggplot(selected_data(),mapping = aes(x = reorder(Driver, LapTime, FUN = median), y = LapTime, col = Driver)) + geom_boxplot() + xlab("Driver") + ylab("Lap time [s]") +
ggtitle("Lap time distributions for selected drivers")
ggplotly(p2) %>% layout(showlegend = F)
})
# Scatterplot of drivers vs pit times
pt3 <- reactive({
p3 <- ggplot(data = selected_pit_data()) +
geom_point(mapping = aes(PitTime, Driver, col = Driver), size = 3) +
xlab("Pit Time [s]") + ylab("Driver") + ggtitle("Pit times for selected drivers")
ggplotly(p3) %>% layout(showlegend = F)
})
# Render plots
output$lineplot <- renderPlotly({pt1()})
output$boxplot <- renderPlotly({pt2()})
output$scatter <- renderPlotly({pt3()})
}
shinyApp(ui, server)
# Total width of window is 12 units
ui <- fluidPage(
titlePanel(h1("F1 data visualisation for selected 2023 grand prix's!", align = "center")),
shinythemes::themeSelector("sandstone"),
sidebarLayout(position = "left",
sidebarPanel("Choose driver", width = 2,
selectInput(inputId = "driverSelect",
label = "Selected drivers:",
choices = driver.names,
selected = c("VER", "HAM"),
multiple = T),
selectInput(inputId = "GPSelect",
label = "Selected grand prix",
choices = races,
selected = "SPAIN",
multiple = F)
),
mainPanel(width = 9,
fluidRow(
splitLayout(cellWidths = c("50%","50%"),
plotlyOutput(outputId = "scatter"),
plotlyOutput(outputId = "boxplot")
)
),
fluidRow(
plotlyOutput(outputId = "lineplot")
)
)
))
install.packages(shinythemes)
install.packages("shinythemes")
# Total width of window is 12 units
ui <- fluidPage(
titlePanel(h1("F1 data visualisation for selected 2023 grand prix's!", align = "center")),
shinythemes::themeSelector("sandstone"),
sidebarLayout(position = "left",
sidebarPanel("Choose driver", width = 2,
selectInput(inputId = "driverSelect",
label = "Selected drivers:",
choices = driver.names,
selected = c("VER", "HAM"),
multiple = T),
selectInput(inputId = "GPSelect",
label = "Selected grand prix",
choices = races,
selected = "SPAIN",
multiple = F)
),
mainPanel(width = 9,
fluidRow(
splitLayout(cellWidths = c("50%","50%"),
plotlyOutput(outputId = "scatter"),
plotlyOutput(outputId = "boxplot")
)
),
fluidRow(
plotlyOutput(outputId = "lineplot")
)
)
))
# Total width of window is 12 units
ui <- fluidPage(
titlePanel(h1("F1 data visualisation for selected 2023 grand prix's!", align = "center")),
shinythemes::themeSelector(),
theme = "sandstone"
sidebarLayout(position = "left",
# Total width of window is 12 units
ui <- fluidPage(
titlePanel(h1("F1 data visualisation for selected 2023 grand prix's!", align = "center")),
shinythemes::themeSelector(),
theme = "sandstone",
sidebarLayout(position = "left",
sidebarPanel("Choose driver", width = 2,
selectInput(inputId = "driverSelect",
label = "Selected drivers:",
choices = driver.names,
selected = c("VER", "HAM"),
multiple = T),
selectInput(inputId = "GPSelect",
label = "Selected grand prix",
choices = races,
selected = "SPAIN",
multiple = F)
),
mainPanel(width = 9,
fluidRow(
splitLayout(cellWidths = c("50%","50%"),
plotlyOutput(outputId = "scatter"),
plotlyOutput(outputId = "boxplot")
)
),
fluidRow(
plotlyOutput(outputId = "lineplot")
)
)
))
server <- function(input, output) {
# Manage data
selected_drivers <- reactive(input$driverSelect)
selected_gp <- reactive(input$GPSelect)
selected_data <- reactive(subset(laps.nonpit.greenflag, Driver %in% selected_drivers()))
selected_laps_pit <- reactive(subset(laps, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., Driver %in% selected_drivers()))
selected_pit_data <- reactive(subset(pit_data, Driver %in% selected_drivers()))
# Create interactive plots
# Laptime vs lapnumber
pt1 <- reactive({
p1 <- ggplot(selected_data(), aes(LapNumber, LapTime, col = Driver)) +
geom_line() + xlab("Lap Number") + ylab("Lap time [s]") +
ggtitle("Lap time throughout the race for selected drivers")
ggplotly(p1) %>% layout(showlegend = F)
})
# Boxplot of laptimes
pt2 <- reactive({
p2 <- ggplot(selected_data(),mapping = aes(x = reorder(Driver, LapTime, FUN = median), y = LapTime, col = Driver)) + geom_boxplot() + xlab("Driver") + ylab("Lap time [s]") +
ggtitle("Lap time distributions for selected drivers")
ggplotly(p2) %>% layout(showlegend = F)
})
# Scatterplot of drivers vs pit times
pt3 <- reactive({
p3 <- ggplot(data = selected_pit_data()) +
geom_point(mapping = aes(PitTime, Driver, col = Driver), size = 3) +
xlab("Pit Time [s]") + ylab("Driver") + ggtitle("Pit times for selected drivers")
ggplotly(p3) %>% layout(showlegend = F)
})
# Render plots
output$lineplot <- renderPlotly({pt1()})
output$boxplot <- renderPlotly({pt2()})
output$scatter <- renderPlotly({pt3()})
}
shinyApp(ui, server)
# Total width of window is 12 units
ui <- fluidPage(
titlePanel(h1("F1 data visualisation for selected 2023 grand prix's!", align = "center")),
theme = "sandstone",
sidebarLayout(position = "left",
sidebarPanel("Choose driver", width = 2,
selectInput(inputId = "driverSelect",
label = "Selected drivers:",
choices = driver.names,
selected = c("VER", "HAM"),
multiple = T),
selectInput(inputId = "GPSelect",
label = "Selected grand prix",
choices = races,
selected = "SPAIN",
multiple = F)
),
mainPanel(width = 9,
fluidRow(
splitLayout(cellWidths = c("50%","50%"),
plotlyOutput(outputId = "scatter"),
plotlyOutput(outputId = "boxplot")
)
),
fluidRow(
plotlyOutput(outputId = "lineplot")
)
)
))
server <- function(input, output) {
# Manage data
selected_drivers <- reactive(input$driverSelect)
selected_gp <- reactive(input$GPSelect)
selected_data <- reactive(subset(laps.nonpit.greenflag, Driver %in% selected_drivers()))
selected_laps_pit <- reactive(subset(laps, !is.na(PitOutTime) | !is.na(PitInTime)) %>%
subset(., Driver %in% selected_drivers()))
selected_pit_data <- reactive(subset(pit_data, Driver %in% selected_drivers()))
# Create interactive plots
# Laptime vs lapnumber
pt1 <- reactive({
p1 <- ggplot(selected_data(), aes(LapNumber, LapTime, col = Driver)) +
geom_line() + xlab("Lap Number") + ylab("Lap time [s]") +
ggtitle("Lap time throughout the race for selected drivers")
ggplotly(p1) %>% layout(showlegend = F)
})
# Boxplot of laptimes
pt2 <- reactive({
p2 <- ggplot(selected_data(),mapping = aes(x = reorder(Driver, LapTime, FUN = median), y = LapTime, col = Driver)) + geom_boxplot() + xlab("Driver") + ylab("Lap time [s]") +
ggtitle("Lap time distributions for selected drivers")
ggplotly(p2) %>% layout(showlegend = F)
})
# Scatterplot of drivers vs pit times
pt3 <- reactive({
p3 <- ggplot(data = selected_pit_data()) +
geom_point(mapping = aes(PitTime, Driver, col = Driver), size = 3) +
xlab("Pit Time [s]") + ylab("Driver") + ggtitle("Pit times for selected drivers")
ggplotly(p3) %>% layout(showlegend = F)
})
# Render plots
output$lineplot <- renderPlotly({pt1()})
output$boxplot <- renderPlotly({pt2()})
output$scatter <- renderPlotly({pt3()})
}
shinyApp(ui, server)
